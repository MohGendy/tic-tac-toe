//One code only array to stack

#include <iostream>

struct Move {
    int row, col;
    char player;
};

class ReplayStack {
private:
    Move moveStack[9]; // max 9 moves in Tic Tac Toe
    int top;
    char board[3][3];

public:
    ReplayStack() : top(-1) {
        resetBoard();
    }

    void resetBoard() {
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                board[i][j] = ' ';
    }

    void pushMove(int row, int col, char player) {
        if (top < 8) {
            moveStack[++top] = {row, col, player};
            board[row][col] = player;
        }
    }

    void undoMove() {
        if (top >= 0) {
            Move last = moveStack[top--];
            board[last.row][last.col] = ' ';
        }
    }

    void displayBoard() const {
        std::cout << "Current board:\n";
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                std::cout << board[i][j] << " ";
            }
            std::cout << "\n";
        }
    }
};

// Example usage
int main() {
    ReplayStack game;
    game.pushMove(0, 0, 'X');
    game.pushMove(1, 1, 'O');
    game.pushMove(0, 1, 'X');
    game.displayBoard();

    std::cout << "Undo last move...\n";
    game.undoMove();
    game.displayBoard();
}




//Note there is two 2 codes in this file one using array to stack and anotherone  using vector take what you need and remove the other
//One code only vector

#include <iostream>
#include <vector>

struct Move {
    int row, col;
    char player;
};

class ReplayVector {
private:
    std::vector<Move> moves;
    int currentIndex;
    char board[3][3];

public:
    ReplayVector(const std::vector<Move>& gameMoves) : moves(gameMoves), currentIndex(0) {
        resetBoard();
    }

    void resetBoard() {
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                board[i][j] = ' ';
    }

    void nextMove() {
        if (currentIndex < moves.size()) {
            Move m = moves[currentIndex++];
            board[m.row][m.col] = m.player;
        }
    }

    void prevMove() {
        if (currentIndex > 0) {
            currentIndex--;
            resetBoard();
            for (int i = 0; i < currentIndex; ++i) {
                Move m = moves[i];
                board[m.row][m.col] = m.player;
            }
        }
    }

    void displayBoard() const {
        std::cout << "Current board:\n";
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                std::cout << board[i][j] << " ";
            }
            std::cout << "\n";
        }
    }
};

// Example usage
int main() {
    std::vector<Move> gameMoves = {
        {0, 0, 'X'},
        {1, 1, 'O'},
        {0, 1, 'X'}
    };

    ReplayVector replay(gameMoves);
    replay.displayBoard();

    std::cout << "\nNext move...\n";
    replay.nextMove();
    replay.displayBoard();

    std::cout << "\nNext move...\n";
    replay.nextMove();
    replay.displayBoard();

    std::cout << "\nPrevious move...\n";
    replay.prevMove();
    replay.displayBoard();
}


